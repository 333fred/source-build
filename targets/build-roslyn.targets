<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Condition="'$(ImportedRootDirProps)' == ''" Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />

  <UsingTask AssemblyFile="$(BuildTaskDirectory)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="AddSourceToNuGetConfig" />
  <UsingTask AssemblyFile="$(BuildTaskDirectory)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="GetHostRid" />
  <UsingTask AssemblyFile="$(BuildTaskDirectory)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="ChangeRuntimesSection" />
  <UsingTask AssemblyFile="$(BuildTaskDirectory)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="FixPathSeparator" />
  <UsingTask AssemblyFile="$(BuildTaskDirectory)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="UpdateMsBuildFrameworkDependencyVersions" />

  <!--
    =======================================================================================================
                                         Roslyn Targets
    =======================================================================================================

  -->

  <Target Name="_InitializeRoslyn">
    <!-- Fetch the repository metadata for the Roslyn repository -->
    <FindInList CaseSensitive="false" List="@(Repository)" ItemSpecToFind="roslyn">
      <Output TaskParameter="ItemFound" ItemName="Roslyn" />
    </FindInList>

    <Error Condition="'%(Roslyn.ProjectDirectory)' == ''" Text="You are missing Roslyn metadata, or you need to specify a Roslyn build directory, either with the /p:PathToRoslyn switch, or in the 'targets/targets.props'" />

    <PropertyGroup>
      <ProjectDirectory>%(Roslyn.ProjectDirectory)</ProjectDirectory>
      <RoslynPackageOutputDirectory>$(ProjectDirectory)Binaries/Packages/</RoslynPackageOutputDirectory>
      <_RoslynTargetRid>$(TargetRid)</_RoslynTargetRid>
      <_RoslynTargetRid Condition="'$(_RoslynTargetRid)' == '' and '$(OS)' == 'Windows_NT'">win7-x64</_RoslynTargetRid>
    </PropertyGroup>
    
    <ItemGroup>
      <RoslynProjectJsonFiles Include="$(ProjectDirectory)/build/**/project.json" />
      <NuSpecFiles Include="$(ProjectDirectory)/**/*.nuspec" />
    </ItemGroup>
  </Target>

  <Target Name="BuildRoslyn" DependsOnTargets="_InitializeRoslyn">
    <AddSourceToNuGetConfig NuGetConfigFile="$(ProjectDirectory)/NuGet.Config"
                            SourceName="Source-Build" 
                            SourcePath="$(SourceBuiltPackagesPath)" />

    <ChangeRuntimesSection ProjectJsonFiles="@(RoslynProjectJsonFiles)"
                           ReplacementRuntimeId="$(_RoslynTargetRid)"
                           FilterRuntimeId="ubuntu.14.04-x64"
                           Condition="'$(TargetOS)' == 'Linux'" />

    <FixPathSeparator NuSpecFiles="@(NuSpecFiles)" />

    <ItemGroup>
      <SourceBuiltPackage Include="$(SourceBuiltPackagesPath)/*.nupkg" />
    </ItemGroup>
    <UpdateMsBuildFrameworkDependencyVersions ProjectPath="$(ProjectDirectory)/build/MSBuildToolset_msbuild/MSBuildToolset.csproj"
                                              NuGetPackages="@(SourceBuiltPackage)" 
                                              Condition="'$(_IsBootstrapping)' == 'true'" />

    <PropertyGroup>
      <RoslynBuildCommand Condition="'$(OS)' != 'Windows_NT'">$(ProjectDirectory)cibuild.sh --$(Configuration) --SkipTests --SkipCrossGen --SkipCommitPrinting</RoslynBuildCommand>
      <RoslynBuildCommand Condition="'$(OS)' == 'Windows_NT'">$(ProjectDirectory)cibuild.cmd /$(Configuration)</RoslynBuildCommand>
      <RoslynBuildCommand Condition="'$(BuildTools_Dir)' != ''">$(RoslynBuildCommand) --bootstrap_cli_path $(BuildTools_Dir)/dotnetcli</RoslynBuildCommand>
      <RoslynBuildCommand Condition="'$(Cli_Path)' != ''">$(RoslynBuildCommand) --bootstrap_msbuild_cli_path $(Cli_Path)</RoslynBuildCommand>
    </PropertyGroup>

    <Exec Command="$(RoslynBuildCommand)"
          WorkingDirectory="$(ProjectDirectory)" />

    <PropertyGroup>
      <CsiCoreBaseDirectory>$(ProjectDirectory)Binaries/$(Configuration)/Exes/</CsiCoreBaseDirectory>
      <CsiCoreSourceDirectory>$(CsiCoreBaseDirectory)CsiCore/</CsiCoreSourceDirectory>
      <CsiCoreWorkingDirectory>$(CsiCoreSourceDirectory)</CsiCoreWorkingDirectory>
      <CsiCoreWorkingDirectory Condition="'$(_IsBootstrapping)' == 'true'">$(CsiCoreBaseDirectory)CsiCore_working/</CsiCoreWorkingDirectory>
      <RoslynToolsetDirectory>$(ProjectDirectory)Binaries/toolset/</RoslynToolsetDirectory>
    </PropertyGroup>
    
    <ItemGroup>
      <CsiCoreCopyFile Include="$(RoslynToolsetDirectory)*" />
      <CsiCoreCopyFile Include="$(CsiCoreSourceDirectory)*" />
    </ItemGroup>
    <!-- Create a working directory where we can copy in the CsiCore and toolset binaries for producing packages -->
    <MakeDir Directories="$(CsiCoreWorkingDirectory)"
             Condition="'$(_IsBootstrapping)' == 'true' and !Exists('$(CsiCoreWorkingDirectory)')" />
    
    <Copy SourceFiles="@(CsiCoreCopyFile)"
          DestinationFolder="$(CsiCoreWorkingDirectory)" 
          OverwriteReadOnlyFiles="true"
          SkipUnchangedFiles="true" 
          Condition="'$(_IsBootstrapping)' == 'true'" />
    <Exec Command="$(CsiCoreWorkingDirectory)corerun $(CsiCoreWorkingDirectory)csi.exe src/NuGet/BuildNuGets.csx Binaries/$(Configuration) 42-localbuild $(RoslynPackageOutputDirectory)"
          WorkingDirectory="$(ProjectDirectory)" />

    <ItemGroup>
      <RoslynPackages Include="$(RoslynPackageOutputDirectory)*.nupkg" />
    </ItemGroup>

    <Copy SourceFiles="@(RoslynPackages)"
          DestinationFolder="$(SourceBuiltPackagesPath)" />

    <WriteVersionsFile NugetPackages="@(RoslynPackages)"
                       OutputPath="%(Roslyn.VersionFile)" />
  </Target>

  <Target Name="CleanRoslyn">
    <RemoveDir Directories="$(ProjectDirectory)Binaries" />
  </Target>
</Project>
