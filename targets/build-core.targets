<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask AssemblyFile="$(TaskDirectory)Microsoft.DotNet.SourceBuild.Tasks/bin/Debug/netstandard1.4/Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="AddRidToRuntimeJson" />
  <UsingTask AssemblyFile="$(TaskDirectory)Microsoft.DotNet.SourceBuild.Tasks/bin/Debug/netstandard1.4/Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="GetHostRid" />
  <UsingTask AssemblyFile="$(TaskDirectory)Microsoft.DotNet.SourceBuild.Tasks/bin/Debug/netstandard1.4/Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="UpdateFrameworkDependencyVersions" />
  <UsingTask AssemblyFile="$(TaskDirectory)Microsoft.DotNet.SourceBuild.Tasks/bin/Debug/netstandard1.4/Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="WriteVersionsFile" />

  <!--
    =======================================================================================================
                                         CoreCLR Targets
    =======================================================================================================
    - These call in to the Core targets listed below.

  -->

  <Target Name="_InitializeCoreClr" >
    <FindInList CaseSensitive="false" List="@(Repository)" ItemSpecToFind="coreclr">
      <Output TaskParameter="ItemFound" ItemName="CoreClr" />
    </FindInList>

    <Error Condition="'%(CoreClr.ProjectDirectory)' == ''" Text="You are missing CoreClr metadata, or you need to specify a CoreCLR git directory, either with the /p:PathToCoreClr switch, or in the 'targets/targets.props'" />

    <PropertyGroup>
      <CoreProjectName>%(CoreClr.Identity)</CoreProjectName>
      <CoreProjectDirectory>%(CoreClr.ProjectDirectory)</CoreProjectDirectory>
      <CorePackageOutputDirectory>$(CoreProjectDirectory)/bin/Product/$(TargetOS).$(Platform).$(Configuration)/.nuget/pkg/</CorePackageOutputDirectory>
      <CoreBuildCommand>$(CoreProjectDirectory)build$(ShellExtension)</CoreBuildCommand>
      <CoreArguments>$(Platform) $(Configuration) skiptests</CoreArguments>
      <CoreVersionFile>%(CoreClr.VersionFile)</CoreVersionFile>      
    </PropertyGroup>
  </Target>

  <Target Name="BuildCoreClr" DependsOnTargets="_InitializeCoreClr">
    <PropertyGroup>
      <BuildProperties>
        CoreProjectName=$(CoreProjectName);
        CoreProjectDirectory=$(CoreProjectDirectory);
        CorePackageOutputDirectory=$(CorePackageOutputDirectory);
        CoreBuildCommand=$(CoreProjectDirectory)build$(ShellExtension);
        CoreArguments=$(Platform) $(Configuration) skiptests msbuildonunsupportedplatform
      </BuildProperties>
      <BuildProperties Condition="'$(BuildTools_Dir)' != ''">
        $(BuildProperties);
        BuildTools_Dir=$(BuildTools_Dir);
      </BuildProperties>
    </PropertyGroup>
    
    <!-- Build binaries -->
    <MSBuild 
      Projects="$(MSBuildThisFileDirectory)../build.proj"
      Targets="BuildCoreRepo" 
      Properties="$(BuildProperties)"
    />
  </Target>

  <Target Name="CleanCoreClr" DependsOnTargets="_InitializeCoreClr">
    <MSBuild 
      Projects="$(MSBuildThisFileDirectory)../build.proj"
      Targets="CleanCoreRepo" 
      Properties="
       CoreProjectName=$(CoreProjectName);
       CoreProjectDirectory=$(CoreProjectDirectory);
       CorePackageOutputDirectory=$(CorePackageOutputDirectory);
       CoreBuildCommand=$(CoreBuildCommand);
       CoreArguments=$(CoreArguments);
       CoreVersionFile=$(CoreVersionFile);"
    />
  </Target>

 <!--
    =======================================================================================================
                                         CoreFX Targets
    =======================================================================================================
    - These call in to the Core targets listed below.
  -->  
  
  
  <Target Name="_InitializeCoreFx">
    <FindInList CaseSensitive="false" List="@(Repository)" ItemSpecToFind="corefx">
      <Output TaskParameter="ItemFound" ItemName="CoreFx" />
    </FindInList>

    <Error Condition="'%(CoreFx.ProjectDirectory)' == ''" Text="Specify a CoreFX git directory, either with the /p:PathToCoreFx switch, or in the 'targets/targets.props'" />

    <PropertyGroup>
      <CoreProjectName>%(CoreFx.Identity)</CoreProjectName>
      <CoreProjectDirectory>%(CoreFx.ProjectDirectory)</CoreProjectDirectory>
      <CorePackageOutputDirectory>$(CoreProjectDirectory)bin/packages/$(Configuration)/</CorePackageOutputDirectory>
      <CoreBuildCommand>$(CoreProjectDirectory)build$(ShellExtension)</CoreBuildCommand>
      <CoreArguments>-$(Configuration) -buildArch=$(Platform)</CoreArguments>
      <CoreVersionFile>%(CoreFx.VersionFile)</CoreVersionFile>
    </PropertyGroup>
  </Target>

  <Target Name="BuildCoreFx" DependsOnTargets="_InitializeCoreFx">
    <GetHostRid Condition="'$(TargetRid)' == ''">
      <Output PropertyName="TargetRid" TaskParameter="Rid" />
    </GetHostRid>

    <PropertyGroup>
      <RuntimeJsonFile>$(CoreProjectDirectory)pkg/Microsoft.NETCore.Platforms/runtime.json</RuntimeJsonFile>
      <CoreClrTemplateFile>$(CoreProjectDirectory)external/coreclr/project.json.template</CoreClrTemplateFile>
      <BuildProperties>
        CoreProjectName=$(CoreProjectName);
        CoreProjectDirectory=$(CoreProjectDirectory);
        CorePackageOutputDirectory=$(CorePackageOutputDirectory);
        CoreBuildCommand=$(CoreProjectDirectory)build$(ShellExtension);
        CoreArguments=-$(Configuration) -buildArch=$(Platform) -- /p:OverridePackageSource=$(SourceBuiltPackagesPath);
      </BuildProperties>
      <BuildProperties Condition="'$(BuildTools_Dir)' != ''">
        $(BuildProperties);
        BuildTools_Dir=$(BuildTools_Dir);
      </BuildProperties>
    </PropertyGroup>

    <ItemGroup>
      <SourceBuiltPackage Include="$(SourceBuiltPackagesPath)/*.nupkg" />
    </ItemGroup>

    <Message Importance="High" Text="Adding rid, $(TargetRid), to $(RuntimeJsonFile)" />
    <AddRidToRuntimeJson RuntimeJson="$(RuntimeJsonFile)"
                         Rid="$(TargetRid)-$(Platform)" />
    <Message Importance="High" Text="Update framework dependency versions in $(CoreClrTemplateFile)" />
    <UpdateFrameworkDependencyVersions ProjectJsonFile="$(CoreClrTemplateFile)"
                                       NuGetPackages="@(SourceBuiltPackage)" />
    
    <MSBuild 
      Projects="$(MSBuildThisFileDirectory)../build.proj"
      Targets="BuildCoreRepo" 
      Properties="$(BuildProperties)"
    />
  </Target>

  <Target Name="CleanCoreFx" DependsOnTargets="_InitializeCoreFx">
    <MSBuild 
      Projects="$(MSBuildThisFileDirectory)../build.proj"
      Targets="CleanCoreRepo" 
      Properties="
       CoreProjectName=$(CoreProjectName);
       CoreProjectDirectory=$(CoreProjectDirectory);
       CorePackageOutputDirectory=$(CorePackageOutputDirectory);
       CoreBuildCommand=$(CoreBuildCommand);
       CoreArguments=$(CoreArguments);
       CoreVersionFile=$(CoreVersionFile);"
    />
  </Target>

  <!--
    =======================================================================================================
                                         For all Core repositories
    =======================================================================================================
  --> 

  <Target Name="BuildCoreRepo"
            DependsOnTargets="BootstrapBuildTools">

    <Exec Command="$(CoreBuildCommand) $(CoreArguments)"
          WorkingDirectory="$(CoreProjectDirectory)" />

    <ItemGroup>
      <CorePackages Include="$(CorePackageOutputDirectory)*.nupkg" />
    </ItemGroup>

    <Copy SourceFiles="@(CorePackages)"
          DestinationFolder="$(SourceBuiltPackagesPath)" />

    <WriteVersionsFile NugetPackages="@(CorePackages)"
                       OutputPath="$(CoreVersionFile)" />
  </Target>

  <Target Name="BootstrapBuildTools"
          Condition="'$(SkipBootstrapBuildTools)' != 'true' and '$(BuildTools_Dir)' != ''">
    <RemoveDir Condition="'$(BuildTools_Dir)' != ''"
               Directories="$(CoreProjectDirectory)/Tools" />

    <PropertyGroup Condition="'$(ShellExtension)' == '.sh'">
      <CopyCommand>cp</CopyCommand>
      <CopyArguments>-fR</CopyArguments>
    </PropertyGroup>
    <PropertyGroup Condition="'$(ShellExtension)' == '.cmd'">
      <CopyCommand>xcopy</CopyCommand>
      <CopyArguments>/Y/e/s</CopyArguments>
    </PropertyGroup>

    <MakeDir Directories="$(CoreProjectDirectory)Tools" />

    <!-- The MSBuild Copy Task ouputs too much useless info (blank lines), so use system copies -->
    <Exec Command="$(CopyCommand) $(CopyArguments) $(BuildTools_Dir)/* $(CoreProjectDirectory)Tools" />
    <Exec Command="$(CopyCommand) $(CopyArguments) $(CoreProjectDirectory)Tools-Override/* $(CoreProjectDirectory)Tools" 
          Condition="Exists('$(CoreProjectDirectory)Tools-Override')" />

    <Copy SourceFiles="$(BuildTools_Dir)/BuildToolsVersion.txt"
          DestinationFolder="$(CoreProjectDirectory)" />
           
  </Target>

  <Target Name="CleanCoreRepo">
    <Exec Command="$(CoreProjectDirectory)clean$(ShellExtension) --all"
          WorkingDirectory="$(CoreProjectDirectory)" />
  </Target>
</Project>
